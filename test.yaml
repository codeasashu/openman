components:
  examples:
    exampleCookiesDeleteGet200:
      value:
        cookies:
          foo2: bar
      x-response-id: 749e6fd7-0f41-4abb-b9cf-c1fffa146587
    exampleCookiesGet200:
      value:
        cookies:
          foo2: bar
      x-response-id: cca7be6e-c8dc-49e8-b1f9-16ce5c6a57d2
    exampleCookiesSetGet200:
      value:
        cookies:
          foo1: bar
          foo2: bar
      x-response-id: 1aaa75e6-6c6b-4577-bf40-77f5b0248264
    exampleGetGet200:
      value:
        args:
          foo1: bar1
          foo2: bar2
        headers:
          accept: '*/*'
          accept-encoding: gzip, deflate
          cache-control: no-cache
          host: postman-echo.com
          postman-token: 5c27cd7d-6b16-4e5a-a0ef-191c9a3a275f
          user-agent: PostmanRuntime/7.6.1
          x-forwarded-port: '443'
          x-forwarded-proto: https
        url: https://postman-echo.com/get?foo1=bar1&foo2=bar2
      x-response-id: ba773afa-78c9-4841-aada-ae458b9cdd7a
    exampleHeadersGet200:
      value:
        headers:
          accept: '*/*'
          accept-encoding: gzip, deflate, sdch
          accept-language: en-US,en;q=0.8
          cache-control: no-cache
          host: echo.getpostman.com
          my-sample-header: Lorem ipsum dolor sit amet
          postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
          user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36
            (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
          x-forwarded-port: '443'
          x-forwarded-proto: https
      x-response-id: fbd08db8-34a7-4293-bcaf-45afe86cda26
    exampleResponseHeadersGet200:
      value:
        Content-Type: text/html
        test: response_headers
      x-response-id: 63549f7a-a0d9-4480-a8bb-3074836df9cd
    exampleTimeNowGet200:
      value: Wed, 11 Jan 2017 10:27:12 GMT
      x-response-id: a05fa893-a9fe-4436-8503-7f320412fe31
    exampleTimeValidGet200:
      value:
        valid: false
      x-response-id: 04ea9eae-2eb2-4cd3-85d2-5c3494ae740f
  schemas:
    schemaCookiesDeleteGet200:
      properties:
        cookies:
          properties:
            foo2:
              type: string
          required:
          - foo2
          type: object
      required:
      - cookies
      type: object
    schemaCookiesGet200:
      properties:
        cookies:
          properties:
            foo2:
              type: string
          required:
          - foo2
          type: object
      required:
      - cookies
      type: object
    schemaCookiesSetGet200:
      properties:
        cookies:
          properties:
            foo1:
              type: string
            foo2:
              type: string
          required:
          - foo1
          - foo2
          type: object
      required:
      - cookies
      type: object
    schemaGetGet200:
      properties:
        args:
          properties:
            foo1:
              type: string
            foo2:
              type: string
          required:
          - foo1
          - foo2
          type: object
        headers:
          properties:
            accept:
              type: string
            accept-encoding:
              type: string
            cache-control:
              type: string
            host:
              type: string
            postman-token:
              type: string
            user-agent:
              type: string
            x-forwarded-port:
              type: string
            x-forwarded-proto:
              type: string
          required:
          - x-forwarded-proto
          - host
          - accept
          - accept-encoding
          - cache-control
          - postman-token
          - user-agent
          - x-forwarded-port
          type: object
        url:
          type: string
      required:
      - args
      - headers
      - url
      type: object
    schemaHeadersGet200:
      properties:
        headers:
          properties:
            accept:
              type: string
            accept-encoding:
              type: string
            accept-language:
              type: string
            cache-control:
              type: string
            host:
              type: string
            my-sample-header:
              type: string
            postman-token:
              type: string
            user-agent:
              type: string
            x-forwarded-port:
              type: string
            x-forwarded-proto:
              type: string
          required:
          - host
          - accept
          - accept-encoding
          - accept-language
          - cache-control
          - my-sample-header
          - postman-token
          - user-agent
          - x-forwarded-port
          - x-forwarded-proto
          type: object
      required:
      - headers
      type: object
    schemaResponseHeadersGet200:
      properties:
        Content-Type:
          type: string
        test:
          type: string
      required:
      - Content-Type
      - test
      type: object
    schemaTimeNowGet200:
      type: string
    schemaTimeValidGet200:
      properties:
        valid:
          format: 'null'
          type: boolean
      required:
      - valid
      type: object
info:
  title: Postman Echo
  version: 1.0.0
openapi: 3.0.0
paths:
  /get:
    get:
      description: "The HTTP `GET` request method is meant to retrieve data from a\
        \ server. The data\nis identified by a unique URI (Uniform Resource Identifier).\
        \ \n\nA `GET` request can pass parameters to the server using \"Query String\
        \ \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\
        \nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the\
        \ HTTP headers, request parameters and the complete\nURI requested."
      operationId: GetGet
      parameters:
      - in: query
        name: foo1
        schema:
          example: bar1
          type: string
        x-link-response:
        - value: bar1
          x-response-id: ba773afa-78c9-4841-aada-ae458b9cdd7a
      - in: query
        name: foo2
        schema:
          example: bar2
          type: string
        x-link-response:
        - value: bar2
          x-response-id: ba773afa-78c9-4841-aada-ae458b9cdd7a
      responses:
        '200':
          content:
            application/json:
              examples:
                GetRequestWoops:
                  $ref: '#/components/examples/exampleGetGet200'
              schema:
                $ref: '#/components/schemas/schemaGetGet200'
          description: GET Request Woops
      summary: GET Request
  /post:
    post:
      description: "The HTTP `POST` request method is meant to transfer data to a\
        \ server \n(and elicit a response). What data is returned depends on the implementation\n\
        of the server.\n\nA `POST` request can pass parameters to the server using\
        \ \"Query String \nParameters\", as well as the Request Body. For example,\
        \ in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\
        \nThe parameter \"hand\" has the value \"wave\". The request body can be in\
        \ multiple\nformats. These formats are defined by the MIME type of the request.\
        \ The MIME \nType can be set using the ``Content-Type`` HTTP header. The most\
        \ commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n\
        * `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters,\
        \ the contents of\nthe request body and the complete URI requested when data\
        \ is sent as a form parameter."
      operationId: PostPost
      requestBody:
        content:
          '*/*':
            example:
              value:
                foo1: bar1
                foo2: bar2
            schema:
              properties:
                foo1:
                  type: string
                foo2:
                  type: string
              required:
              - foo1
              - foo2
              type: object
            x-link-response: []
      responses:
        '200':
          description: ''
      summary: POST Form Data
  /put:
    put:
      description: "The HTTP `PUT` request method is similar to HTTP `POST`. It too\
        \ is meant to \ntransfer data to a server (and elicit a response). What data\
        \ is returned depends on the implementation\nof the server.\n\nA `PUT` request\
        \ can pass parameters to the server using \"Query String \nParameters\", as\
        \ well as the Request Body. For example, in the following \nraw HTTP request,\n\
        \n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
      operationId: PutPut
      requestBody:
        content:
          '*/*':
            example:
              value: This is expected to be sent back as part of response body.
            schema:
              type: string
            x-link-response: []
      responses:
        '200':
          description: ''
      summary: PUT Request
  /patch:
    patch:
      description: "The HTTP `PATCH` method is used to update resources on a server.\
        \ The exact\nuse of `PATCH` requests depends on the server in question. There\
        \ are a number\nof server implementations which handle `PATCH` differently.\
        \ Technically, \n`PATCH` supports both Query String parameters and a Request\
        \ Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug\
        \ information\nsuch as the HTTP headers, Query String arguments, and the Request\
        \ Body."
      operationId: PatchPatch
      requestBody:
        content:
          '*/*':
            example:
              value: This is expected to be sent back as part of response body.
            schema:
              type: string
            x-link-response: []
      responses:
        '200':
          description: ''
      summary: PATCH Request
  /delete:
    delete:
      description: "The HTTP `DELETE` method is used to delete resources on a server.\
        \ The exact\nuse of `DELETE` requests depends on the server implementation.\
        \ In general, \n`DELETE` requests support both, Query String parameters as\
        \ well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request\
        \ and provides debug information\nsuch as the HTTP headers, Query String arguments,\
        \ and the Request Body."
      operationId: DeleteDelete
      requestBody:
        content:
          '*/*':
            example:
              value: This is expected to be sent back as part of response body.
            schema:
              type: string
            x-link-response: []
      responses:
        '200':
          description: ''
      summary: DELETE Request
  /headers:
    get:
      description: 'A `GET` request to this endpoint returns the list of all request
        headers as part of the response JSON.

        In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding)
        will reveal the headers as part of the response.'
      operationId: HeadersGet
      parameters:
      - in: header
        name: my-sample-header
        schema:
          example: Lorem ipsum dolor sit amet
          type: string
        x-link-response:
        - value: Lorem ipsum dolor sit amet
          x-response-id: fbd08db8-34a7-4293-bcaf-45afe86cda26
      responses:
        '200':
          content:
            application/json:
              examples:
                MySampleHeader:
                  $ref: '#/components/examples/exampleHeadersGet200'
              schema:
                $ref: '#/components/schemas/schemaHeadersGet200'
          description: my-sample-header
      summary: Request Headers
  /response-headers:
    get:
      description: 'This endpoint causes the server to send custom set of response
        headers. Providing header values as part of the URL parameters of a `GET`
        request to this endpoint returns the same as part of response header.


        To send your own set of headers, simply add or replace the the URL parameters
        with your own set.'
      operationId: ResponseHeadersGet
      parameters:
      - in: query
        name: foo1
        schema:
          example: bar1
          type: string
        x-link-response: []
      - in: query
        name: foo2
        schema:
          example: bar2
          type: string
        x-link-response: []
      responses:
        '200':
          content:
            text/html:
              examples:
                ResponseHeaders:
                  $ref: '#/components/examples/exampleResponseHeadersGet200'
              schema:
                $ref: '#/components/schemas/schemaResponseHeadersGet200'
          description: Response headers
      summary: Response Headers
  /cookies/set:
    get:
      description: 'The cookie setter endpoint accepts a list of cookies and their
        values as part of URL parameters of a `GET` request. These cookies are saved
        and can be subsequently retrieved or deleted. The response of this request
        returns a JSON with all cookies listed.


        To set your own set of cookies, simply replace the URL parameters "foo1=bar1&foo2=bar2"
        with your own set of key-value pairs.'
      operationId: CookiesSetGet
      parameters:
      - in: query
        name: foo1
        schema:
          example: bar1
          type: string
        x-link-response: []
      - in: query
        name: foo2
        schema:
          example: bar2
          type: string
        x-link-response: []
      responses:
        '200':
          content:
            application/json:
              examples:
                Cookies:
                  $ref: '#/components/examples/exampleCookiesSetGet200'
              schema:
                $ref: '#/components/schemas/schemaCookiesSetGet200'
          description: Cookies
      summary: Set Cookies
  /cookies:
    get:
      description: Use this endpoint to get a list of all cookies that are stored
        with respect to this domain. Whatever key-value pairs that has been previously
        set by calling the "Set Cookies" endpoint, will be returned as response JSON.
      operationId: CookiesGet
      responses:
        '200':
          content:
            application/json:
              examples:
                Cookies:
                  $ref: '#/components/examples/exampleCookiesGet200'
              schema:
                $ref: '#/components/schemas/schemaCookiesGet200'
          description: Cookies
      summary: Get Cookies
  /cookies/delete:
    get:
      description: One or more cookies that has been set for this domain can be deleted
        by providing the cookie names as part of the URL parameter. The response of
        this request is a JSON containing the list of currently set cookies.
      operationId: CookiesDeleteGet
      parameters:
      - in: query
        name: foo1
        schema:
          example: null
        x-link-response: []
      - in: query
        name: foo2
        schema:
          example: null
        x-link-response: []
      responses:
        '200':
          content:
            application/json:
              examples:
                CookiesResponse:
                  $ref: '#/components/examples/exampleCookiesDeleteGet200'
              schema:
                $ref: '#/components/schemas/schemaCookiesDeleteGet200'
          description: Cookies Response
      summary: Delete Cookies
  /time/now:
    get:
      description: 'A simple `GET` request to `/time/now` to return the current timestamp
        as a UTC string.


        ```

        Fri, 04 Nov 2016 09:00:46 GMT

        ```'
      operationId: TimeNowGet
      responses:
        '200':
          content:
            text/html:
              examples:
                TimeAsText:
                  $ref: '#/components/examples/exampleTimeNowGet200'
              schema:
                $ref: '#/components/schemas/schemaTimeNowGet200'
          description: time as text
      summary: Current UTC time
  /time/valid:
    get:
      description: "A simple `GET` request to `/time/valid` to determine the validity\
        \ of the timestamp, (current by default).\nThis endpoint accepts `timestamp`,\
        \ `locale`, `format`, and `strict` query parameters to construct the date\
        \ time instance to check against.\n\nResponses are provided in JSON format,\
        \ with a valid key to indicate the result. The response code is `200`.\n\n\
        ```\n{\n  valid: true/false\n}\n```"
      operationId: TimeValidGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response:
        - value: '2016-10-10'
          x-response-id: 60c9720f-3058-4565-8e9b-26c805826d87
        - value: '2016-10-10'
          x-response-id: 04ea9eae-2eb2-4cd3-85d2-5c3494ae740f
      responses:
        '200':
          content:
            application/json:
              examples:
                InvalidTimestamp:
                  $ref: '#/components/examples/exampleTimeValidGet200'
              schema:
                $ref: '#/components/schemas/schemaTimeValidGet200'
          description: Invalid Timestamp
      summary: Timestamp validity
  /time/format:
    get:
      description: "A simple `GET` request to `/time/format` to convert the timestamp\
        \ to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`,\
        \ `format`, and `strict` query parameters to construct the date time instance\
        \ to check against.\n\nResponses are provided in JSON format, with a `format`\
        \ key to indicate the result. The response code is `200` for valid query parameters,\
        \ and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```"
      operationId: TimeFormatGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: format
        schema:
          example: mm
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Format timestamp
  /time/unit:
    get:
      description: "A simple `GET` request to `/time/unit` to extract the specified\
        \ timestamp unit (as provided in the `unit` query parameter). The default\
        \ unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`,\
        \ `format`, and `strict` query parameters to construct the date time instance\
        \ to check against.\n\nResponses are provided in JSON format, with a `unit`\
        \ key to indicate the result. The response code is `200` for valid query parameters,\
        \ and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n\
        ```"
      operationId: TimeUnitGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: unit
        schema:
          example: day
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Extract timestamp unit
  /time/add:
    get:
      description: "A simple `GET` request to `/time/add` to add units of time to\
        \ the specified / current timestamp (as provided in the `years`, `months`,\
        \ `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\
        \nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query\
        \ parameters to construct the date time instance to check against.\n\nResponses\
        \ are provided in JSON format, with a `sum` key to indicate the result. The\
        \ response code is `200` for valid query parameters, and `400` otherwise.\n\
        \n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n\
        }\n```"
      operationId: TimeAddGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: years
        schema:
          example: '100'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Time addition
  /time/subtract:
    get:
      description: "A simple `GET` request to `/time/subtract` to subtract units of\
        \ time from the specified / current timestamp (as provided in the `years`,\
        \ `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query\
        \ parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and\
        \ `strict` query parameters to construct the date time instance to check against.\n\
        \nResponses are provided in JSON format, with a `difference` key to indicate\
        \ the result. The response code is `200` for valid query parameters, and `400`\
        \ otherwise.\n\n```\n{\n  difference: \"difference between (provided / current)\
        \ and provided timestamps\"\n}\n```"
      operationId: TimeSubtractGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: years
        schema:
          example: '50'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Time subtraction
  /time/start:
    get:
      description: "A simple `GET` request to `/time/start` to return a relative timstamp\
        \ in the past from the specified / current timestamp (as provided in the `unit`\
        \ query parameter).\n\nFor instance, if the `unit` has been specified as `month`,\
        \ the returned timestamp would indicate the beginning of the current month.\
        \ Similar results are returned for other units of time, like: `years`, `months`,\
        \ `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint\
        \ accepts `timestamp`, `locale`, `format`, and `strict` query parameters to\
        \ construct the date time instance to check against.\n\nResponses are provided\
        \ in JSON format, with a `start` key to indicate the result. The response\
        \ code is `200` for valid query parameters, and `400` otherwise.\n\n```\n\
        {\n  start: \"A timestamp from the past, depending on the `unit` specified\"\
        \n}\n```"
      operationId: TimeStartGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: unit
        schema:
          example: month
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Start of time
  /time/object:
    get:
      description: "A simple `GET` request to `/time/object` to return the current\
        \ / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has\
        \ been specified as `month`, the returned timestamp would indicate the beginning\
        \ of the current month. Similar results are returned for other units of time,\
        \ like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\
        \nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query\
        \ parameters to construct the date time instance to check against.\n\nResponses\
        \ are provided in JSON format. The response code is `200` for valid query\
        \ parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n\
        \  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds:\
        \ 980\n}\n```"
      operationId: TimeObjectGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Object representation
  /time/before:
    get:
      description: "A simple `GET` request to `/time/before` to check if the provided\
        \ timestamps is before a comparison `target` (query parameter).\n\nThis endpoint\
        \ accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters\
        \ to construct the date time instance to check against.\n\nResponses are provided\
        \ in JSON format, with a `before` key to indicate the result. The response\
        \ code is `200` for valid query parameters, and `400` otherwise.\n\n```\n\
        {\n  before: true/false\n}\n```"
      operationId: TimeBeforeGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: target
        schema:
          example: '2017-10-10'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Before comparisons
  /time/after:
    get:
      description: "A simple `GET` request to `/time/after` to check if the provided\
        \ timestamps is after a comparison `target` (query parameter).\n\nThis endpoint\
        \ accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters\
        \ to construct the date time instance to check against.\n\nResponses are provided\
        \ in JSON format, with a `after` key to indicate the result. The response\
        \ code is `200` for valid query parameters, and `400` otherwise.\n\n```\n\
        {\n  after: true/false\n}\n```"
      operationId: TimeAfterGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: target
        schema:
          example: '2017-10-10'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: After comparisons
  /time/between:
    get:
      description: "A simple `GET` request to `/time/between` to check if the provided\
        \ timestamp is between a range specified by the `start` and `end` query parameters.\
        \ A resolution limit can also be specified by the `unit` query parameter.\n\
        \nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie\
        \ between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`,\
        \ `locale`, `format`, `strict`, and `target` query parameters to construct\
        \ the date time instance to check against.\n\nResponses are provided in JSON\
        \ format, with a `between` key to indicate the result. The response code is\
        \ `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between:\
        \ true/false\n}\n```"
      operationId: TimeBetweenGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      - in: query
        name: start
        schema:
          example: '2017-10-10'
          type: string
        x-link-response: []
      - in: query
        name: end
        schema:
          example: '2019-10-10'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Between timestamps
  /time/leap:
    get:
      description: "A simple `GET` request to `/time/leap` to check if the provided/current\
        \ timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`,\
        \ `locale`, `format`, `strict`, and `target` query parameters to construct\
        \ the date time instance to check against.\n\nResponses are provided in JSON\
        \ format, with a `leap` key to indicate the result. The response code is `200`\
        \ for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n\
        }\n```"
      operationId: TimeLeapGet
      parameters:
      - in: query
        name: timestamp
        schema:
          example: '2016-10-10'
          type: string
        x-link-response: []
      responses:
        '200':
          description: ''
      summary: Leap year check
  /digest-auth:
    get:
      description: 'Performing a simple `GET` request to this endpoint returns status
        code `401 Unauthorized` with `WWW-Authenticate` header containing information
        to successfully authenticate subsequent requests.

        The `WWW-Authenticate` header must be processed to extract `realm` and `nonce`
        values to hash subsequent requests.


        When this request is executed within Postman, the script attached with this
        request does the hard work of extracting realm and nonce from the header and
        set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding)
        named `echo_digest_nonce` and `echo_digest_realm`.

        These variables are re-used in subsequent request for seamless integration
        of the two requests.'
      operationId: DigestAuthGet
      responses:
        '200':
          description: ''
      summary: DigestAuth Request
